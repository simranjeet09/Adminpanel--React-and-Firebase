{"ast":null,"code":"import { _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, getDefaultEmulatorHostnameAndPort, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nconst name = \"@firebase/database\";\nconst version = \"0.13.10\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** The semver (www.semver.org) version of the SDK. */\nlet SDK_VERSION = '';\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\nclass DOMStorageWrapper {\n  /**\r\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n   */\n  constructor(domStorage_) {\n    this.domStorage_ = domStorage_;\n    // Use a prefix to avoid collisions with other stuff saved by the app.\n    this.prefix_ = 'firebase:';\n  }\n  /**\r\n   * @param key - The key to save the value under\r\n   * @param value - The value being stored, or null to remove the key.\r\n   */\n  set(key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n  /**\r\n   * @returns The value that was stored under this key, or null\r\n   */\n  get(key) {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n  remove(key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n  prefixedName_(name) {\n    return this.prefix_ + name;\n  }\n  toString() {\n    return this.domStorage_.toString();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\nclass MemoryStorage {\n  constructor() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n  set(key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n  get(key) {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n  remove(key) {\n    delete this.cache_[key];\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\nconst createStoragefor = function (domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\nconst PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst logClient = new Logger('@firebase/database');\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\nconst LUIDGenerator = function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\nconst sha1 = function (str) {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\nconst buildLogMessage_ = function () {\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = i < 0 || arguments.length <= i ? undefined : arguments[i];\n    if (Array.isArray(arg) || arg && typeof arg === 'object' &&\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof arg.length === 'number') {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\nlet logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n */\nlet firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\nconst enableLogging$1 = function (logger_, persistent) {\n  assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\nconst log = function () {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging$1(true);\n    }\n  }\n  if (logger) {\n    for (var _len = arguments.length, varArgs = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n      varArgs[_key2] = arguments[_key2];\n    }\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\nconst logWrapper = function (prefix) {\n  return function () {\n    for (var _len2 = arguments.length, varArgs = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      varArgs[_key3] = arguments[_key3];\n    }\n    log(prefix, ...varArgs);\n  };\n};\nconst error = function () {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...arguments);\n  logClient.error(message);\n};\nconst fatal = function () {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...arguments)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\nconst warn = function () {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...arguments);\n  logClient.warn(message);\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\nconst warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\nconst isInvalidJSONNumber = function (data) {\n  return typeof data === 'number' && (data !== data ||\n  // NaN\n  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);\n};\nconst executeWhenDOMReady = function (fn) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (document.attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      document.attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      window.attachEvent('onload', wrappedFn);\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\nconst MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\nconst MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\nconst nameCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @returns {!number} comparison result.\r\n */\nconst stringCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\nconst requireKey = function (key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n  }\n};\nconst ObjectToUniqueKey = function (obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\nconst splitStringBySize = function (str, segsize) {\n  const len = str.length;\n  if (len <= segsize) {\n    return [str];\n  }\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\nfunction each(obj, fn) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\nconst doubleToIEEE754String = function (v) {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << ebits - 1) - 1;\n  let s, e, f, ln, i;\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\nconst isChromeExtensionContentScript = function () {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\nconst isWindowsStoreApp = function () {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\nfunction errorForServerCode(code, query) {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n  const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error.code = code.toUpperCase();\n  return error;\n}\n/**\r\n * Used to test for integer-looking strings\r\n */\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\nconst INTEGER_32_MIN = -2147483648;\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\nconst INTEGER_32_MAX = 2147483647;\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\nconst tryParseInt = function (str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\nconst exceptionGuard = function (fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\nconst beingCrawled = function () {\n  const userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || '';\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\nconst setTimeoutNonBlocking = function (fn, time) {\n  const timeout = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (typeof timeout === 'number' &&\n  // @ts-ignore Is only defined in Deno environments.\n  typeof Deno !== 'undefined' &&\n  // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n  Deno['unrefTimer']) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && timeout['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    timeout['unref']();\n  }\n  return timeout;\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\nclass AppCheckTokenProvider {\n  constructor(appName_, appCheckProvider) {\n    this.appName_ = appName_;\n    this.appCheckProvider = appCheckProvider;\n    this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({\n      optional: true\n    });\n    if (!this.appCheck) {\n      appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => this.appCheck = appCheck);\n    }\n  }\n  getToken(forceRefresh) {\n    if (!this.appCheck) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n  addTokenChangeListener(listener) {\n    var _a;\n    (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\n  }\n  notifyForInvalidToken() {\n    warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` + 'are invalid. This usually indicates your app was not initialized correctly.');\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\nclass FirebaseAuthTokenProvider {\n  constructor(appName_, firebaseOptions_, authProvider_) {\n    this.appName_ = appName_;\n    this.firebaseOptions_ = firebaseOptions_;\n    this.authProvider_ = authProvider_;\n    this.auth_ = null;\n    this.auth_ = authProvider_.getImmediate({\n      optional: true\n    });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => this.auth_ = auth);\n    }\n  }\n  getToken(forceRefresh) {\n    if (!this.auth_) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n  addTokenChangeListener(listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_.get().then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n  removeTokenChangeListener(listener) {\n    this.authProvider_.get().then(auth => auth.removeAuthTokenListener(listener));\n  }\n  notifyForInvalidToken() {\n    let errorMessage = 'Provided authentication credentials for the app named \"' + this.appName_ + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nclass EmulatorTokenProvider {\n  constructor(accessToken) {\n    this.accessToken = accessToken;\n  }\n  getToken(forceRefresh) {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n  addTokenChangeListener(listener) {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n  removeTokenChangeListener(listener) {}\n  notifyForInvalidToken() {}\n}\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst PROTOCOL_VERSION = '5';\nconst VERSION_PARAM = 'v';\nconst TRANSPORT_SESSION_PARAM = 's';\nconst REFERER_PARAM = 'r';\nconst FORGE_REF = 'f';\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nconst LAST_SESSION_PARAM = 'ls';\nconst APPLICATION_ID_PARAM = 'p';\nconst APP_CHECK_TOKEN_PARAM = 'ac';\nconst WEBSOCKET = 'websocket';\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A class that holds metadata about a Repo object\r\n */\nclass RepoInfo {\n  /**\r\n   * @param host - Hostname portion of the url for the repo\r\n   * @param secure - Whether or not this repo is accessed over ssl\r\n   * @param namespace - The namespace represented by the repo\r\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n   * @param persistenceKey - Override the default session persistence storage key\r\n   */\n  constructor(host, secure, namespace, webSocketOnly) {\n    let nodeAdmin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let persistenceKey = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n    let includeNamespaceInQueryParams = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.nodeAdmin = nodeAdmin;\n    this.persistenceKey = persistenceKey;\n    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this._host;\n  }\n  isCacheableHost() {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n  isCustomHost() {\n    return this._domain !== 'firebaseio.com' && this._domain !== 'firebaseio-demo.com';\n  }\n  get host() {\n    return this._host;\n  }\n  set host(newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n  toString() {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n  toURLString() {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams ? `?ns=${this.namespace}` : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\nfunction repoInfoNeedsQueryParam(repoInfo) {\n  return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;\n}\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n  let connURL;\n  if (type === WEBSOCKET) {\n    connURL = (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL = (repoInfo.secure ? 'https://' : 'http://') + repoInfo.internalHost + '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n  const pairs = [];\n  each(params, (key, value) => {\n    pairs.push(key + '=' + value);\n  });\n  return connURL + pairs.join('&');\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Tracks a collection of stats.\r\n */\nclass StatsCollection {\n  constructor() {\n    this.counters_ = {};\n  }\n  incrementCounter(name) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n    this.counters_[name] += amount;\n  }\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst collections = {};\nconst reporters = {};\nfunction statsManagerGetCollection(repoInfo) {\n  const hashString = repoInfo.toString();\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n  return collections[hashString];\n}\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n  const hashString = repoInfo.toString();\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n  return reporters[hashString];\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\nclass PacketReceiver {\n  /**\r\n   * @param onMessage_\r\n   */\n  constructor(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n  closeAfter(responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n  /**\r\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n   * browsers will respond in the same order as the requests we sent\r\n   */\n  handleResponse(requestNum, data) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[this.currentResponseNum];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// URL query parameters associated with longpolling\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n */\nclass BrowserPollConnection {\n  /**\r\n   * @param connId An identifier for this connection, used for logging\r\n   * @param repoInfo The info for the endpoint to send data to.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The AppCheck token for this client.\r\n   * @param authToken The AuthToken to use for this connection.\r\n   * @param transportSessionId Optional transportSessionid if we are\r\n   * reconnecting for an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n   * already created a connection previously\r\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = params => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n  open(onMessage, onDisconnect) {\n    var _this = this;\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT));\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n        const [command, arg1, arg2, arg3, arg4] = args;\n        _this.incrementIncomingBytes_(args);\n        if (!_this.scriptTagHolder) {\n          return; // we closed the connection.\n        }\n\n        if (_this.connectTimeoutTimer_) {\n          clearTimeout(_this.connectTimeoutTimer_);\n          _this.connectTimeoutTimer_ = null;\n        }\n        _this.everConnected_ = true;\n        if (command === FIREBASE_LONGPOLL_START_PARAM) {\n          _this.id = arg1;\n          _this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            _this.scriptTagHolder.sendNewPolls = false;\n            // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n            _this.myPacketOrderer.closeAfter(arg1, () => {\n              _this.onClosed_();\n            });\n          } else {\n            _this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, function () {\n        for (var _len4 = arguments.length, args = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n        const [pN, data] = args;\n        _this.incrementIncomingBytes_(args);\n        _this.myPacketOrderer.handleResponse(pN, data);\n      }, () => {\n        this.onClosed_();\n      }, this.urlFn);\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n  /**\r\n   * Call this when a handshake has completed successfully and we want to consider the connection established\r\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n  /**\r\n   * Forces long polling to be considered as a potential transport\r\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n  /**\r\n   * Forces longpolling to not be considered as a potential transport\r\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();\n    }\n  }\n  /**\r\n   * No-op for polling\r\n   */\n  markConnectionHealthy() {}\n  /**\r\n   * Stops polling and cleans up the iframe\r\n   */\n  shutdown_() {\n    this.isClosed_ = true;\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n  /**\r\n   * Triggered when this transport is closed\r\n   */\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n  /**\r\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n   * that we've left.\r\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n  /**\r\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n   * broken into chunks (since URLs have a small maximum length).\r\n   * @param data - The JSON data to transmit.\r\n   */\n  send(data) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  }\n  /**\r\n   * This is how we notify the server that we're leaving.\r\n   * We aren't able to send requests with DHTML on a window close event, but we can\r\n   * trigger XHR requests in some browsers (everything but Opera basically).\r\n   */\n  addDisconnectPingFrame(id, pw) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  }\n  /**\r\n   * Used to track the bytes received by this client\r\n   */\n  incrementIncomingBytes_(args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\nclass FirebaseIFrameScriptHolder {\n  /**\r\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n   */\n  constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn;\n    //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n    this.outstandingRequests = new Set();\n    //A queue of the pending segments waiting for transmission to the server.\n    this.pendingSegs = [];\n    //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n    this.currentSerial = Math.floor(Math.random() * 100000000);\n    // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n    this.sendNewPolls = true;\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\r\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n   * actually use.\r\n   */\n  static createIFrame_() {\n    const iframe = document.createElement('iframe');\n    iframe.style.display = 'none';\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (iframe.document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = iframe.document; //others?\n    }\n\n    return iframe;\n  }\n  /**\r\n   * Cancel all outstanding queries and remove the frame.\r\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n  /**\r\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n   * @param id - The ID of this connection\r\n   * @param pw - The password for this connection\r\n   */\n  startLongPoll(id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n  /**\r\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n   * too many outstanding requests and we are still alive.\r\n   *\r\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n   * needed.\r\n   */\n  newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\r\n   * Queue a packet for transmission to the server.\r\n   * @param segnum - A sequential id for this packet segment used for reassembly\r\n   * @param totalsegs - The total number of segments in this packet\r\n   * @param data - The data for this segment.\r\n   */\n  enqueueSegment(segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    });\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n  /**\r\n   * Add a script tag for a regular long-poll request.\r\n   * @param url - The URL of the script tag.\r\n   * @param serial - The serial number of the request.\r\n   */\n  addLongPollTag_(url, serial) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n    this.addTag(url, readyStateCB);\n  }\n  /**\r\n   * Add an arbitrary script tag to the iframe.\r\n   * @param url - The URL for the script tag source.\r\n   * @param loadCB - A callback to be triggered once the script has loaded.\r\n   */\n  addTag(url, loadCB) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = newScript.onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = newScript.readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = newScript.onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\nclass WebSocketConnection {\n  /**\r\n   * @param connId identifier for this transport\r\n   * @param repoInfo The info for the websocket endpoint.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The App Check Token for this client.\r\n   * @param authToken The Auth Token for this client.\r\n   * @param transportSessionId Optional transportSessionId if this is connecting\r\n   * to an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if there was a previous\r\n   * connection\r\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n  /**\r\n   * @param repoInfo - The info for the websocket endpoint.\r\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n   * @returns connection url\r\n   */\n  static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\n    const urlParams = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n    if (!isNodeSdk() && typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n  open(onMessage, onDisconnect) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n    this.log_('Websocket connecting to ' + this.connURL);\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n    try {\n      let options;\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n        if (proxy) {\n          options['proxy'] = {\n            origin: proxy\n          };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m);\n    };\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n  /**\r\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n   */\n  start() {}\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n  static isAvailable() {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n  }\n  /**\r\n   * Returns true if we previously failed to connect with this transport.\r\n   */\n  static previouslyFailed() {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n  }\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n  appendFrame_(data) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess);\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n  /**\r\n   * @param frameCount - The number of frames we are expecting from the server\r\n   */\n  handleNewFrameCount_(frameCount) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n  /**\r\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n   * @returns Any remaining data to be process, or null if there is none\r\n   */\n  extractFrameCount_(data) {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n  /**\r\n   * Process a websocket frame that has arrived from the server.\r\n   * @param mess - The frame data\r\n   */\n  handleIncomingFrame(mess) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n\n    const data = mess['data'];\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n    this.resetKeepAlive();\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n  /**\r\n   * Send a message to the server\r\n   * @param data - The JSON object to transmit\r\n   */\n  send(data) {\n    this.resetKeepAlive();\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n  shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n  /**\r\n   * External-facing close handler.\r\n   * Close the websocket and kill the connection.\r\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n  /**\r\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n   * the last activity.\r\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n  }\n  /**\r\n   * Send a string over the websocket.\r\n   *\r\n   * @param str - String to send.\r\n   */\n  sendString_(str) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\nclass TransportManager {\n  /**\r\n   * @param repoInfo - Metadata around the namespace we're connecting to\r\n   */\n  constructor(repoInfo) {\n    this.initTransports_(repoInfo);\n  }\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n  /**\r\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n   * TransportManager has already set up transports_\r\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n  initTransports_(repoInfo) {\n    const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n      }\n      isSkipPollConnection = true;\n    }\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = this.transports_ = [];\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n  /**\r\n   * @returns The constructor for the initial transport to use\r\n   */\n  initialTransport() {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n  /**\r\n   * @returns The constructor for the next transport, or null\r\n   */\n  upgradeTransport() {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n// Keeps track of whether the TransportManager has already chosen a transport to use\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\nconst SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\nclass Connection {\n  /**\r\n   * @param id - an id for this connection\r\n   * @param repoInfo_ - the info for the endpoint to connect to\r\n   * @param applicationId_ - the Firebase App ID for this project\r\n   * @param appCheckToken_ - The App Check Token for this device.\r\n   * @param authToken_ - The auth token for this session.\r\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n   */\n  constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.appCheckToken_ = appCheckToken_;\n    this.authToken_ = authToken_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0 /* CONNECTING */;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\r\n   * Starts a connection attempt\r\n   */\n  start_() {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\r\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n     * still have the context of your originating frame.\r\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (this.conn_ && this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has received ' + this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (this.conn_ && this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has sent ' + this.conn_.bytesSent + ' bytes.  Leaving connection alive.');\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS));\n    }\n  }\n  nextTransportId_() {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n  disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n  connReceiver_(conn) {\n    return message => {\n      if (this.state_ !== 2 /* DISCONNECTED */) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n  /**\r\n   * @param dataMsg - An arbitrary data message to be sent to the server\r\n   */\n  sendRequest(dataMsg) {\n    // wrap in a data message envelope and send it on\n    const msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  }\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  onSecondaryControl_(controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE];\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n  onSecondaryMessageReceived_(parsedData) {\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n  upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n  proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    });\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  }\n  onPrimaryMessageReceived_(parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data);\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n  onDataMessage_(message) {\n    this.onPrimaryResponse_();\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n  onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n  onControl_(controlData) {\n    const cmd = requireKey(MESSAGE_TYPE, controlData);\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n  /**\r\n   * @param handshake - The handshake data returned from the server\r\n   */\n  onHandshake_(handshake) {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === 0 /* CONNECTING */) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n  tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n  startUpgrade_(conn) {\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n  onReset_(host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === 1 /* CONNECTED */) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n  onConnectionEstablished_(conn, timestamp) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1 /* CONNECTED */;\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n  sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\n      this.log_('sending ping on primary.');\n      this.sendData_({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n  onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n  /**\r\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n   * we should flush the host cache\r\n   */\n  onConnectionLost_(everConnected) {\n    this.conn_ = null;\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === 0 /* CONNECTING */) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === 1 /* CONNECTED */) {\n      this.log_('Realtime connection lost.');\n    }\n    this.close();\n  }\n  onConnectionShutdown_(reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n    this.close();\n  }\n  sendData_(data) {\n    if (this.state_ !== 1 /* CONNECTED */) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n  /**\r\n   * Cleans up this connection, calling the appropriate callbacks\r\n   */\n  close() {\n    if (this.state_ !== 2 /* DISCONNECTED */) {\n      this.log_('Closing realtime connection.');\n      this.state_ = 2 /* DISCONNECTED */;\n      this.closeConnections_();\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n  closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\nclass ServerActions {\n  put(pathString, data, onComplete, hash) {}\n  merge(pathString, data, onComplete, hash) {}\n  /**\r\n   * Refreshes the auth token for the current connection.\r\n   * @param token - The authentication token\r\n   */\n  refreshAuthToken(token) {}\n  /**\r\n   * Refreshes the app check token for the current connection.\r\n   * @param token The app check token\r\n   */\n  refreshAppCheckToken(token) {}\n  onDisconnectPut(pathString, data, onComplete) {}\n  onDisconnectMerge(pathString, data, onComplete) {}\n  onDisconnectCancel(pathString, onComplete) {}\n  reportStats(stats) {}\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\nclass EventEmitter {\n  constructor(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   */\n  trigger(eventType) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n      for (var _len5 = arguments.length, varArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key6 = 1; _key6 < _len5; _key6++) {\n        varArgs[_key6 - 1] = arguments[_key6];\n      }\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n  on(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback,\n      context\n    });\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n  off(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n  validateEventType_(eventType) {\n    assert(this.allowedEvents_.find(et => {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\nclass OnlineMonitor extends EventEmitter {\n  constructor() {\n    super(['online']);\n    this.online_ = true;\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !isMobileCordova()) {\n      window.addEventListener('online', () => {\n        if (!this.online_) {\n          this.online_ = true;\n          this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', () => {\n        if (this.online_) {\n          this.online_ = false;\n          this.trigger('online', false);\n        }\n      }, false);\n    }\n  }\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n  getInitialEvent(eventType) {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n  currentlyOnline() {\n    return this.online_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\nclass Path {\n  /**\r\n   * @param pathOrString - Path string to parse, or another path, or the raw\r\n   * tokens array\r\n   */\n  constructor(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/');\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n  toString() {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n    return pathString || '/';\n  }\n}\nfunction newEmptyPath() {\n  return new Path('');\n}\nfunction pathGetFront(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n  return path.pieces_[path.pieceNum_];\n}\n/**\r\n * @returns The number of segments in this path\r\n */\nfunction pathGetLength(path) {\n  return path.pieces_.length - path.pieceNum_;\n}\nfunction pathPopFront(path) {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\nfunction pathGetBack(path) {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n  return null;\n}\nfunction pathToUrlEncodedString(path) {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n  return pathString || '/';\n}\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\nfunction pathSlice(path) {\n  let begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\nfunction pathParent(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n  return new Path(pieces, 0);\n}\nfunction pathChild(path, childPathObj) {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n  return new Path(pieces, 0);\n}\n/**\r\n * @returns True if there are no segments in this path\r\n */\nfunction pathIsEmpty(path) {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\nfunction newRelativePath(outerPath, innerPath) {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n  }\n}\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\nfunction pathCompare(left, right) {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\r\n * @returns true if paths are the same.\r\n */\nfunction pathEquals(path, other) {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n  for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */\nfunction pathContains(path, other) {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\nclass ValidationPath {\n  /**\r\n   * @param path - Initial Path.\r\n   * @param errorPrefix_ - Prefix for any error messages.\r\n   */\n  constructor(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\nfunction validationPathPush(validationPath, child) {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\nfunction validationPathPop(validationPath) {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\nfunction validationPathCheckValid(validationPath) {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(validationPath.errorPrefix_ + 'has a key path longer than ' + MAX_PATH_LENGTH_BYTES + ' bytes (' + validationPath.byteLength_ + ').');\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(validationPath.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + MAX_PATH_DEPTH + ') or object contains a cycle ' + validationPathToErrorString(validationPath));\n  }\n}\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\nfunction validationPathToErrorString(validationPath) {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass VisibilityMonitor extends EventEmitter {\n  constructor() {\n    super(['visible']);\n    let hidden;\n    let visibilityChange;\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, () => {\n        const visible = !document[hidden];\n        if (visible !== this.visible_) {\n          this.visible_ = visible;\n          this.trigger('visible', visible);\n        }\n      }, false);\n    }\n  }\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n  getInitialEvent(eventType) {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\nclass PersistentConnection extends ServerActions {\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param applicationId_ - The Firebase App ID for this project\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.onConnectStatus_ = onConnectStatus_;\n    this.onServerInfoUpdate_ = onServerInfoUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    this.authOverride_ = authOverride_;\n    // Used for diagnostic logging.\n    this.id = PersistentConnection.nextPersistentConnectionId_++;\n    this.log_ = logWrapper('p:' + this.id + ':');\n    this.interruptReasons_ = {};\n    this.listens = new Map();\n    this.outstandingPuts_ = [];\n    this.outstandingGets_ = [];\n    this.outstandingPutCount_ = 0;\n    this.outstandingGetCount_ = 0;\n    this.onDisconnectRequestQueue_ = [];\n    this.connected_ = false;\n    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    this.securityDebugCallback_ = null;\n    this.lastSessionId = null;\n    this.establishConnectionTimer_ = null;\n    this.visible_ = false;\n    // Before we get connected, we keep a queue of pending messages to send.\n    this.requestCBHash_ = {};\n    this.requestNumber_ = 0;\n    this.realtime_ = null;\n    this.authToken_ = null;\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = false;\n    this.invalidAuthTokenCount_ = 0;\n    this.invalidAppCheckTokenCount_ = 0;\n    this.firstConnection_ = true;\n    this.lastConnectionAttemptTime_ = null;\n    this.lastConnectionEstablishedTime_ = null;\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n  sendRequest(action, body, onResponse) {\n    const curReqNum = ++this.requestNumber_;\n    const msg = {\n      r: curReqNum,\n      a: action,\n      b: body\n    };\n    this.log_(stringify(msg));\n    assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n  get(query) {\n    this.initConnection_();\n    const deferred = new Deferred();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: message => {\n        const payload = message['d'];\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n    return deferred.promise;\n  }\n  listen(query, currentHashFn, tag, onComplete) {\n    this.initConnection_();\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n    assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\n    const listenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString).set(queryId, listenSpec);\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n  sendGet_(index) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, message => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n  sendListen_(listenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req = {\n      /*path*/p: pathString\n    };\n    const action = 'q';\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n    req[/*hash*/'h'] = listenSpec.hashFn();\n    this.sendRequest(action, req, message => {\n      const payload = message[/*data*/'d'];\n      const status = message[/*status*/'s'];\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n      const currentListenSpec = this.listens.get(pathString) && this.listens.get(pathString).get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n  static warnOnListenWarnings_(payload, query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(`Using an unspecified index. Your data will be downloaded and ` + `filtered on the client. Consider adding ${indexSpec} at ` + `${indexPath} to your security rules for better performance.`);\n      }\n    }\n  }\n  refreshAuthToken(token) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n  reduceReconnectDelayIfAdminCredential_(credential) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n  refreshAppCheckToken(token) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n  /**\r\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n   * a auth revoked (the connection is closed).\r\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData = {\n        cred: token\n      };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(authMethod, requestData, res => {\n        const status = res[/*status*/'s'];\n        const data = res[/*data*/'d'] || 'error';\n        if (this.authToken_ === token) {\n          if (status === 'ok') {\n            this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  }\n  /**\r\n   * Attempts to authenticate with the given token. If the authentication\r\n   * attempt fails, it's triggered like the token was revoked (the connection is\r\n   * closed).\r\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest('appcheck', {\n        'token': this.appCheckToken_\n      }, res => {\n        const status = res[/*status*/'s'];\n        const data = res[/*data*/'d'] || 'error';\n        if (status === 'ok') {\n          this.invalidAppCheckTokenCount_ = 0;\n        } else {\n          this.onAppCheckRevoked_(status, data);\n        }\n      });\n    }\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n  unlisten(query, tag) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n  sendUnlisten_(pathString, queryId, queryObj, tag) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n    const req = {\n      /*path*/p: pathString\n    };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n    this.sendRequest(action, req);\n  }\n  onDisconnectPut(pathString, data, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n  onDisconnectMerge(pathString, data, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n  onDisconnectCancel(pathString, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n  sendOnDisconnect_(action, pathString, data, onComplete) {\n    const request = {\n      /*path*/p: pathString,\n      /*data*/d: data\n    };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, response => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(response[/*status*/'s'], response[/* data */'d']);\n        }, Math.floor(0));\n      }\n    });\n  }\n  put(pathString, data, onComplete, hash) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n  merge(pathString, data, onComplete, hash) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n  putInternal(action, pathString, data, onComplete, hash) {\n    this.initConnection_();\n    const request = {\n      /*path*/p: pathString,\n      /*data*/d: data\n    };\n    if (hash !== undefined) {\n      request[/*hash*/'h'] = hash;\n    }\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n  sendPut_(index) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n    this.sendRequest(action, request, message => {\n      this.log_(action + ' response', message);\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n      if (onComplete) {\n        onComplete(message[/*status*/'s'], message[/* data */'d']);\n      }\n    });\n  }\n  reportStats(stats) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = {\n        /*counters*/c: stats\n      };\n      this.log_('reportStats', request);\n      this.sendRequest( /*stats*/'s', request, result => {\n        const status = result[/*status*/'s'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */'d'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n  onDataMessage_(message) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'];\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  }\n  onDataPush_(action, body) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(body[/*path*/'p'], body[/*data*/'d'], /*isMerge*/false, body['t']);\n    } else if (action === 'm') {\n      this.onDataUpdate_(body[/*path*/'p'], body[/*data*/'d'], /*isMerge=*/true, body['t']);\n    } else if (action === 'c') {\n      this.onListenRevoked_(body[/*path*/'p'], body[/*query*/'q']);\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(body[/*status code*/'s'], body[/* explanation */'d']);\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(body[/*status code*/'s'], body[/* explanation */'d']);\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error('Unrecognized action received from server: ' + stringify(action) + '\\nAre you using the latest client?');\n    }\n  }\n  onReady_(timestamp, sessionId) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n  scheduleConnect_(timeout) {\n    assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout));\n  }\n  initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n  onVisible_(visible) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n  onOnline_(online) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n  onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n      const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n      reconnectDelay = Math.random() * reconnectDelay;\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n    }\n    this.onConnectStatus_(false);\n  }\n  async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg) {\n        assert(connection, \"sendRequest call when we're not connected not allowed.\");\n        connection.sendRequest(msg);\n      };\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([this.authTokenProvider_.getToken(forceRefresh), this.appCheckTokenProvider_.getToken(forceRefresh)]);\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, /* onKill= */reason => {\n            warn(reason + ' (' + this.repoInfo_.toString() + ')');\n            this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n          }, lastSessionId);\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n  interrupt(reason) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n  resume(reason) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n  handleTimestamp_(timestamp) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({\n      serverTimeOffset: delta\n    });\n  }\n  cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n  onListenRevoked_(pathString, query) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n  removeListen_(pathString, queryId) {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString);\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n  onAuthRevoked_(statusCode, explanation) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n  onAppCheckRevoked_(statusCode, explanation) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n  onSecurityDebugPacket_(body) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  }\n  restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n    }\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n  /**\r\n   * Sends client stats for first connection\r\n   */\n  sendConnectStats_() {\n    const stats = {};\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n  shouldReconnect_() {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\nPersistentConnection.nextPersistentConnectionId_ = 0;\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass NamedNode {\n  constructor(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n  static Wrap(name, node) {\n    return new NamedNode(name, node);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Index {\n  /**\r\n   * @returns A standalone comparison function for\r\n   * this index\r\n   */\n  getCompare() {\n    return this.compare.bind(this);\n  }\n  /**\r\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n   *\r\n   *\r\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n   */\n  indexedValueChanged(oldNode, newNode) {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n  /**\r\n   * @returns a node wrapper that will sort equal to or less than\r\n   * any other node wrapper, using this index\r\n   */\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet __EMPTY_NODE;\nclass KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a, b) {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return false; // The key for a node never changes.\n  }\n\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n  makePost(indexValue, name) {\n    assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  toString() {\n    return '.key';\n  }\n}\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An iterator over an LLRBNode.\r\n */\nclass SortedMapIterator {\n  /**\r\n   * @param node - Node to iterate.\r\n   * @param isReverse_ - Whether or not to iterate in reverse\r\n   */\n  constructor(node, startKey, comparator, isReverse_) {\n    let resultGenerator_ = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    this.nodeStack_ = [];\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n  getNext() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n    let node = this.nodeStack_.pop();\n    let result;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = {\n        key: node.key,\n        value: node.value\n      };\n    }\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n    return result;\n  }\n  hasNext() {\n    return this.nodeStack_.length > 0;\n  }\n  peek() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  }\n}\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\nclass LLRBNode {\n  /**\r\n   * @param key - Key associated with this node.\r\n   * @param value - Value associated with this node.\r\n   * @param color - Whether this node is red.\r\n   * @param left - Left child.\r\n   * @param right - Right child.\r\n   */\n  constructor(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\r\n   * Returns a copy of the current node, optionally replacing pieces of it.\r\n   *\r\n   * @param key - New key for the node, or null.\r\n   * @param value - New value for the node, or null.\r\n   * @param color - New color for the node, or null.\r\n   * @param left - New left child for the node, or null.\r\n   * @param right - New right child for the node, or null.\r\n   * @returns The node copy.\r\n   */\n  copy(key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  }\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n  count() {\n    return this.left.count() + 1 + this.right.count();\n  }\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n  isEmpty() {\n    return false;\n  }\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   *   node.  If it returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n  inorderTraversal(action) {\n    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);\n  }\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  reverseTraversal(action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  }\n  /**\r\n   * @returns The minimum node in the tree.\r\n   */\n  min_() {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  }\n  /**\r\n   * @returns The maximum key in the tree.\r\n   */\n  minKey() {\n    return this.min_().key;\n  }\n  /**\r\n   * @returns The maximum key in the tree.\r\n   */\n  maxKey() {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n  /**\r\n   * @param key - Key to insert.\r\n   * @param value - Value to insert.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with the key/value added.\r\n   */\n  insert(key, value, comparator) {\n    let n = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n    return n.fixUp_();\n  }\n  /**\r\n   * @returns New tree, with the minimum key removed.\r\n   */\n  removeMin_() {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n    let n = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  }\n  /**\r\n   * @param key - The key of the item to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with the specified item removed.\r\n   */\n  remove(key, comparator) {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n  /**\r\n   * @returns Whether this is a RED node.\r\n   */\n  isRed_() {\n    return this.color;\n  }\n  /**\r\n   * @returns New tree after performing any needed rotations.\r\n   */\n  fixUp_() {\n    let n = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n  /**\r\n   * @returns New tree, after moveRedLeft.\r\n   */\n  moveRedLeft_() {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n  /**\r\n   * @returns New tree, after moveRedRight.\r\n   */\n  moveRedRight_() {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n  /**\r\n   * @returns New tree, after rotateLeft.\r\n   */\n  rotateLeft_() {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  }\n  /**\r\n   * @returns New tree, after rotateRight.\r\n   */\n  rotateRight_() {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  }\n  /**\r\n   * @returns Newt ree, after colorFlip.\r\n   */\n  colorFlip_() {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n  /**\r\n   * For testing.\r\n   *\r\n   * @returns True if all is well.\r\n   */\n  checkMaxDepth_() {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n  check_() {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\nLLRBNode.RED = true;\nLLRBNode.BLACK = false;\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\nclass LLRBEmptyNode {\n  /**\r\n   * Returns a copy of the current node.\r\n   *\r\n   * @returns The node copy.\r\n   */\n  copy(key, value, color, left, right) {\n    return this;\n  }\n  /**\r\n   * Returns a copy of the tree, with the specified key/value added.\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item added.\r\n   */\n  insert(key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  }\n  /**\r\n   * Returns a copy of the tree, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item removed.\r\n   */\n  remove(key, comparator) {\n    return this;\n  }\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n  count() {\n    return 0;\n  }\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n  isEmpty() {\n    return true;\n  }\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  inorderTraversal(action) {\n    return false;\n  }\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  reverseTraversal(action) {\n    return false;\n  }\n  minKey() {\n    return null;\n  }\n  maxKey() {\n    return null;\n  }\n  check_() {\n    return 0;\n  }\n  /**\r\n   * @returns Whether this node is red.\r\n   */\n  isRed_() {\n    return false;\n  }\n}\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\nclass SortedMap {\n  /**\r\n   * @param comparator_ - Key comparator.\r\n   * @param root_ - Optional root node for the map.\r\n   */\n  constructor(comparator_) {\n    let root_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SortedMap.EMPTY_NODE;\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key/value added or replaced.\r\n   * (TODO: We should perhaps rename this method to 'put')\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @returns New map, with item added.\r\n   */\n  insert(key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @returns New map, with item removed.\r\n   */\n  remove(key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\r\n   * Returns the value of the node with the given key, or null.\r\n   *\r\n   * @param key - The key to look up.\r\n   * @returns The value of the node with the given key, or null if the\r\n   * key doesn't exist.\r\n   */\n  get(key) {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n  /**\r\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n   * @param key - The key to find the predecessor of\r\n   * @returns The predecessor key.\r\n   */\n  getPredecessorKey(key) {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  }\n  /**\r\n   * @returns True if the map is empty.\r\n   */\n  isEmpty() {\n    return this.root_.isEmpty();\n  }\n  /**\r\n   * @returns The total number of nodes in the map.\r\n   */\n  count() {\n    return this.root_.count();\n  }\n  /**\r\n   * @returns The minimum key in the map.\r\n   */\n  minKey() {\n    return this.root_.minKey();\n  }\n  /**\r\n   * @returns The maximum key in the map.\r\n   */\n  maxKey() {\n    return this.root_.maxKey();\n  }\n  /**\r\n   * Traverses the map in key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n  inorderTraversal(action) {\n    return this.root_.inorderTraversal(action);\n  }\n  /**\r\n   * Traverses the map in reverse key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns True if the traversal was aborted.\r\n   */\n  reverseTraversal(action) {\n    return this.root_.reverseTraversal(action);\n  }\n  /**\r\n   * Returns an iterator over the SortedMap.\r\n   * @returns The iterator.\r\n   */\n  getIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  }\n  getIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  }\n  getReverseIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  }\n  getReverseIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  }\n}\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet MAX_NODE$2;\nfunction setMaxNode$1(val) {\n  MAX_NODE$2 = val;\n}\nconst priorityHashText = function (priority) {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\nconst validatePriorityNode = function (priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\nclass LeafNode {\n  /**\r\n   * @param value_ - The value to store in this leaf node. The object type is\r\n   * possible in the event of a deferred value\r\n   * @param priorityNode_ - The priority of this node.\r\n   */\n  constructor(value_) {\n    let priorityNode_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n  static set __childrenNodeConstructor(val) {\n    __childrenNodeConstructor = val;\n  }\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n  /** @inheritDoc */\n  isLeafNode() {\n    return true;\n  }\n  /** @inheritDoc */\n  getPriority() {\n    return this.priorityNode_;\n  }\n  /** @inheritDoc */\n  updatePriority(newPriorityNode) {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n  /** @inheritDoc */\n  getImmediateChild(childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  /** @inheritDoc */\n  getChild(path) {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild() {\n    return false;\n  }\n  /** @inheritDoc */\n  getPredecessorChildName(childName, childNode) {\n    return null;\n  }\n  /** @inheritDoc */\n  updateImmediateChild(childName, newChildNode) {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n    }\n  }\n  /** @inheritDoc */\n  updateChild(path, newChildNode) {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n    }\n  }\n  /** @inheritDoc */\n  isEmpty() {\n    return false;\n  }\n  /** @inheritDoc */\n  numChildren() {\n    return 0;\n  }\n  /** @inheritDoc */\n  forEachChild(index, action) {\n    return false;\n  }\n  val(exportFormat) {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n  /** @inheritDoc */\n  hash() {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n      }\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n  /**\r\n   * Returns the value of the leaf node.\r\n   * @returns The value of the node.\r\n   */\n  getValue() {\n    return this.value_;\n  }\n  compareTo(other) {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other);\n    }\n  }\n  /**\r\n   * Comparison specifically for two leaf nodes\r\n   */\n  compareToLeafNode_(otherLeaf) {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex() {\n    return this;\n  }\n  isIndexed() {\n    return true;\n  }\n  equals(other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other;\n      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n    } else {\n      return false;\n    }\n  }\n}\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet nodeFromJSON$1;\nlet MAX_NODE$1;\nfunction setNodeFromJSON(val) {\n  nodeFromJSON$1 = val;\n}\nfunction setMaxNode(val) {\n  MAX_NODE$1 = val;\n}\nclass PriorityIndex extends Index {\n  compare(a, b) {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node) {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  }\n  makePost(indexValue, name) {\n    const priorityNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  toString() {\n    return '.priority';\n  }\n}\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_2 = Math.log(2);\nclass Base12Num {\n  constructor(length) {\n    const logBase2 = num =>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parseInt(Math.log(num) / LOG_2, 10);\n    const bitMask = bits => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n  nextBitIsOne() {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  }\n}\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n  const buildBalancedTree = function (low, high) {\n    const length = high - low;\n    let namedNode;\n    let key;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt(length / 2, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n  const buildFrom12Array = function (base12) {\n    let node = null;\n    let root = null;\n    let index = childList.length;\n    const buildPennant = function (chunkSize, color) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n    const attachPennant = function (pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap(mapSortFn || cmp, root);\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet _defaultIndexMap;\nconst fallbackObject = {};\nclass IndexMap {\n  constructor(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n  /**\r\n   * The default IndexMap for nodes without a priority\r\n   */\n  static get Default() {\n    assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n    _defaultIndexMap = _defaultIndexMap || new IndexMap({\n      '.priority': fallbackObject\n    }, {\n      '.priority': PRIORITY_INDEX\n    });\n    return _defaultIndexMap;\n  }\n  get(indexKey) {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n  hasIndex(indexDefinition) {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n  addIndex(indexDefinition, existingChildren) {\n    assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = Object.assign({}, this.indexSet_);\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = Object.assign({}, this.indexes_);\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n  /**\r\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n   */\n  addToIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\n      const index = safeGet(this.indexSet_, indexName);\n      assert(index, 'Missing index implementation for ' + indexName);\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          const childList = [];\n          const iter = existingChildren.getIterator(NamedNode.Wrap);\n          let next = iter.getNext();\n          while (next) {\n            if (next.name !== namedNode.name) {\n              childList.push(next);\n            }\n            next = iter.getNext();\n          }\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        let newChildren = indexedChildren;\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n  /**\r\n   * Create a new IndexMap instance with the given value removed\r\n   */\n  removeFromIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, indexedChildren => {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\nlet EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\nclass ChildrenNode {\n  /**\r\n   * @param children_ - List of children of this node..\r\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n   */\n  constructor(children_, priorityNode_, indexMap_) {\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\r\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n     * class instead of an empty ChildrenNode.\r\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n    if (this.children_.isEmpty()) {\n      assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n  static get EMPTY_NODE() {\n    return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n  }\n  /** @inheritDoc */\n  isLeafNode() {\n    return false;\n  }\n  /** @inheritDoc */\n  getPriority() {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n  /** @inheritDoc */\n  updatePriority(newPriorityNode) {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n  /** @inheritDoc */\n  getImmediateChild(childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n  /** @inheritDoc */\n  getChild(path) {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n  /** @inheritDoc */\n  hasChild(childName) {\n    return this.children_.get(childName) !== null;\n  }\n  /** @inheritDoc */\n  updateImmediateChild(childName, newChildNode) {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n      const newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n  /** @inheritDoc */\n  updateChild(path, newChildNode) {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n  /** @inheritDoc */\n  isEmpty() {\n    return this.children_.isEmpty();\n  }\n  /** @inheritDoc */\n  numChildren() {\n    return this.children_.count();\n  }\n  /** @inheritDoc */\n  val(exportFormat) {\n    if (this.isEmpty()) {\n      return null;\n    }\n    const obj = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      obj[key] = childNode.val(exportFormat);\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key] = obj[key];\n      }\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n  /** @inheritDoc */\n  hash() {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n      }\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n  /** @inheritDoc */\n  getPredecessorChildName(childName, childNode, index) {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n  getFirstChildName(indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n  getFirstChild(indexDefinition) {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n  /**\r\n   * Given an index, return the key name of the largest value we have, according to that index\r\n   */\n  getLastChildName(indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n  getLastChild(indexDefinition) {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(index, action) {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n  getIterator(indexDefinition) {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n  getIteratorFrom(startPost, indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  getReverseIterator(indexDefinition) {\n    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n  }\n  getReverseIteratorFrom(endPost, indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other) {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition) {\n    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index) {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n  /**\r\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n   * instead.\r\n   *\r\n   */\n  resolveIndex_(indexDefinition) {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\nclass MaxNode extends ChildrenNode {\n  constructor() {\n    super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\n  }\n  compareTo(other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n  equals(other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n  getPriority() {\n    return this;\n  }\n  getImmediateChild(childName) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n  isEmpty() {\n    return false;\n  }\n}\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\nconst MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n/**\r\n * Reference Extensions\r\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\nfunction nodeFromJSON(json) {\n  let priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n  assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority = childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n    const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n    }\n  } else {\n    let node = ChildrenNode.EMPTY_NODE;\n    each(json, (key, childData) => {\n      if (contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass PathIndex extends Index {\n  constructor(indexPath_) {\n    super();\n    this.indexPath_ = indexPath_;\n    assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n  }\n  extractChild(snap) {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a, b) {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  }\n  maxPost() {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString() {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ValueIndex extends Index {\n  compare(a, b) {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node) {\n    return true;\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MAX;\n  }\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  toString() {\n    return '.value';\n  }\n}\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\nconst MIN_PUSH_CHAR = '-';\nconst MAX_PUSH_CHAR = 'z';\nconst MAX_KEY_LEN = 786;\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\nconst nextPushId = function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars = [];\n  return function (now) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n    let id = timeStampChars.join('');\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\nconst successor = function (key) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n  let i = next.length - 1;\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n  return next.slice(0, i + 1).join('');\n};\n// `key` is assumed to be non-empty.\nconst predecessor = function (key) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction changeValue(snapshotNode) {\n  return {\n    type: \"value\" /* VALUE */,\n    snapshotNode\n  };\n}\nfunction changeChildAdded(childName, snapshotNode) {\n  return {\n    type: \"child_added\" /* CHILD_ADDED */,\n    snapshotNode,\n    childName\n  };\n}\nfunction changeChildRemoved(childName, snapshotNode) {\n  return {\n    type: \"child_removed\" /* CHILD_REMOVED */,\n    snapshotNode,\n    childName\n  };\n}\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n  return {\n    type: \"child_changed\" /* CHILD_CHANGED */,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\nfunction changeChildMoved(childName, snapshotNode) {\n  return {\n    type: \"child_moved\" /* CHILD_MOVED */,\n    snapshotNode,\n    childName\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\nclass IndexedFilter {\n  constructor(index_) {\n    this.index_ = index_;\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n        } else {\n          assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes() {\n    return false;\n  }\n  getIndexedFilter() {\n    return this;\n  }\n  getIndex() {\n    return this.index_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\nclass RangedFilter {\n  constructor(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n  getStartPost() {\n    return this.startPost_;\n  }\n  getEndPost() {\n    return this.endPost_;\n  }\n  matches(node) {\n    return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes() {\n    return true;\n  }\n  getIndexedFilter() {\n    return this.indexedFilter_;\n  }\n  getIndex() {\n    return this.index_;\n  }\n  static getStartPost_(params) {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n  static getEndPost_(params) {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\nclass LimitedFilter {\n  constructor(params) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a, b) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes() {\n    return true;\n  }\n  getIndexedFilter() {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex() {\n    return this.index_;\n  }\n  fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a, b) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n      const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n          }\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\nclass QueryParams {\n  constructor() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.startAfterSet_ = false;\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.endBeforeSet_ = false;\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n  hasStart() {\n    return this.startSet_;\n  }\n  hasStartAfter() {\n    return this.startAfterSet_;\n  }\n  hasEndBefore() {\n    return this.endBeforeSet_;\n  }\n  /**\r\n   * @returns True if it would return from left.\r\n   */\n  isViewFromLeft() {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\n    }\n  }\n  /**\r\n   * Only valid to call if hasStart() returns true\r\n   */\n  getIndexStartValue() {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n  /**\r\n   * Only valid to call if hasStart() returns true.\r\n   * Returns the starting key name for the range defined by these query parameters\r\n   */\n  getIndexStartName() {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n  hasEnd() {\n    return this.endSet_;\n  }\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   */\n  getIndexEndValue() {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * Returns the end key name for the range defined by these query parameters\r\n   */\n  getIndexEndName() {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n  hasLimit() {\n    return this.limitSet_;\n  }\n  /**\r\n   * @returns True if a limit has been set and it has been explicitly anchored\r\n   */\n  hasAnchoredLimit() {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n  /**\r\n   * Only valid to call if hasLimit() returns true\r\n   */\n  getLimit() {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n  getIndex() {\n    return this.index_;\n  }\n  loadsAllData() {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n  isDefault() {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n  copy() {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\nfunction queryParamsGetNodeFilter(queryParams) {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\n  return newParams;\n}\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\n  return newParams;\n}\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n  let params;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n  let childKey;\n  let params;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\nfunction queryParamsOrderBy(queryParams, index) {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n  const qs = {};\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = \"$priority\" /* PRIORITY_INDEX */;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = \"$value\" /* VALUE_INDEX */;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = \"$key\" /* KEY_INDEX */;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\n  if (queryParams.startSet_) {\n    qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[\"startAt\" /* START_AT */] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n  if (queryParams.endSet_) {\n    qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[\"endAt\" /* END_AT */] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\n    } else {\n      qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\n    }\n  }\n  return qs;\n}\nfunction queryParamsGetQueryObject(queryParams) {\n  const obj = {};\n  if (queryParams.startSet_) {\n    obj[\"sp\" /* INDEX_START_VALUE */] = queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[\"sn\" /* INDEX_START_NAME */] = queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[\"l\" /* LIMIT */] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = \"l\" /* VIEW_FROM_LEFT */;\n      } else {\n        viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\n      }\n    }\n\n    obj[\"vf\" /* VIEW_FROM */] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[\"i\" /* INDEX */] = queryParams.index_.toString();\n  }\n  return obj;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\nclass ReadonlyRestClient extends ServerActions {\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    /** @private {function(...[*])} */\n    this.log_ = logWrapper('p:rest:');\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     */\n    this.listens_ = {};\n  }\n  reportStats(stats) {\n    throw new Error('Method not implemented.');\n  }\n  static getListenId_(query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n      return query._path.toString();\n    }\n  }\n  /** @inheritDoc */\n  listen(query, currentHashFn, tag, onComplete) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n      if (error === null) {\n        this.onDataUpdate_(pathString, data, /*isMerge=*/false, tag);\n      }\n      if (safeGet(this.listens_, listenId) === thisListen) {\n        let status;\n        if (!error) {\n          status = 'ok';\n        } else if (error === 401) {\n          status = 'permission_denied';\n        } else {\n          status = 'rest_error:' + error;\n        }\n        onComplete(status, null);\n      }\n    });\n  }\n  /** @inheritDoc */\n  unlisten(query, tag) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n  get(query) {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    const pathString = query._path.toString();\n    const deferred = new Deferred();\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n      if (error === null) {\n        this.onDataUpdate_(pathString, data, /*isMerge=*/false, /*tag=*/null);\n        deferred.resolve(data);\n      } else {\n        deferred.reject(new Error(data));\n      }\n    });\n    return deferred.promise;\n  }\n  /** @inheritDoc */\n  refreshAuthToken(token) {\n    // no-op since we just always call getToken.\n  }\n  /**\r\n   * Performs a REST request to the given path, with the provided query string parameters,\r\n   * and any auth credentials we have.\r\n   */\n  restRequest_(pathString) {\n    let queryStringParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let callback = arguments.length > 2 ? arguments[2] : undefined;\n    queryStringParameters['format'] = 'export';\n    return Promise.all([this.authTokenProvider_.getToken( /*forceRefresh=*/false), this.appCheckTokenProvider_.getToken( /*forceRefresh=*/false)]).then(_ref => {\n      let [authToken, appCheckToken] = _ref;\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n      const url = (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host + pathString + '?' + 'ns=' + this.repoInfo_.namespace + querystring(queryStringParameters);\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n      xhr.open('GET', url, /*asynchronous=*/true);\n      xhr.send();\n    });\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\nclass SnapshotHolder {\n  constructor() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n  getNode(path) {\n    return this.rootNode_.getChild(path);\n  }\n  updateSnapshot(path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newSparseSnapshotTree() {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\nclass StatsListener {\n  constructor(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n  get() {\n    const newStats = this.collection_.get();\n    const delta = Object.assign({}, newStats);\n    if (this.last_) {\n      each(this.last_, (stat, value) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n    return delta;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\nclass StatsReporter {\n  constructor(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    const timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n  reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats = {};\n    let haveStatsToReport = false;\n    each(stats, (stat, value) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n    // queue our next run.\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n *\r\n * @enum\r\n */\nvar OperationType;\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\nfunction newOperationSourceUser() {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\nfunction newOperationSourceServer() {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\nfunction newOperationSourceServerTaggedQuery(queryId) {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass AckUserWrite {\n  /**\r\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n   */\n  constructor( /** @inheritDoc */path, /** @inheritDoc */affectedTree, /** @inheritDoc */revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n    this.source = newOperationSourceUser();\n  }\n  operationForChild(childName) {\n    if (!pathIsEmpty(this.path)) {\n      assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ListenComplete {\n  constructor(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Overwrite {\n  constructor(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n    this.type = OperationType.OVERWRITE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Merge {\n  constructor( /** @inheritDoc */source, /** @inheritDoc */path, /** @inheritDoc */children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n    this.type = OperationType.MERGE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString() {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\nclass CacheNode {\n  constructor(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\r\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n   */\n  isFullyInitialized() {\n    return this.fullyInitialized_;\n  }\n  /**\r\n   * Returns whether this node is potentially missing children due to a filter applied to the node\r\n   */\n  isFiltered() {\n    return this.filtered_;\n  }\n  isCompleteForPath(path) {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n  isCompleteForChild(key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  }\n  getNode() {\n    return this.node_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\nclass EventGenerator {\n  constructor(query_) {\n    this.query_ = query_;\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n  const events = [];\n  const moves = [];\n  changes.forEach(change => {\n    if (change.type === \"child_changed\" /* CHILD_CHANGED */ && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\n  return events;\n}\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n  filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n      }\n    });\n  });\n}\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n    return change;\n  }\n}\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newViewCache(eventCache, serverCache) {\n  return {\n    eventCache,\n    serverCache\n  };\n}\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n  return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n  return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n  return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;\n}\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n  return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\nconst EmptyChildren = () => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n  return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\nclass ImmutableTree {\n  constructor(value) {\n    let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EmptyChildren();\n    this.value = value;\n    this.children = children;\n  }\n  static fromObject(obj) {\n    let tree = new ImmutableTree(null);\n    each(obj, (childPath, childSnap) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n  /**\r\n   * True if the value is empty and there are no children\r\n   */\n  isEmpty() {\n    return this.value === null && this.children.isEmpty();\n  }\n  /**\r\n   * Given a path and predicate, return the first node and the path to that node\r\n   * where the predicate returns true.\r\n   *\r\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n   *\r\n   * @param relativePath - The remainder of the path\r\n   * @param predicate - The predicate to satisfy to return a node\r\n   */\n  findRootMostMatchingPathAndValue(relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: newEmptyPath(),\n        value: this.value\n      };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n  /**\r\n   * Find, if it exists, the shortest subpath of the given path that points a defined\r\n   * value in the tree\r\n   */\n  findRootMostValueAndPath(relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n  /**\r\n   * @returns The subtree at the given path\r\n   */\n  subtree(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\r\n   * Sets a value at the specified path.\r\n   *\r\n   * @param relativePath - Path to set value at.\r\n   * @param toSet - Value to set.\r\n   * @returns Resulting tree.\r\n   */\n  set(relativePath, toSet) {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\r\n   * Removes the value at the specified path.\r\n   *\r\n   * @param relativePath - Path to value to remove.\r\n   * @returns Resulting tree.\r\n   */\n  remove(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n  /**\r\n   * Gets a value from the tree.\r\n   *\r\n   * @param relativePath - Path to get value for.\r\n   * @returns Value at path, or null.\r\n   */\n  get(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n  /**\r\n   * Replace the subtree at the specified path with the given new tree.\r\n   *\r\n   * @param relativePath - Path to replace subtree for.\r\n   * @param newTree - New tree.\r\n   * @returns Resulting tree.\r\n   */\n  setTree(relativePath, newTree) {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\r\n   * Performs a depth first fold on this tree. Transforms a tree into a single\r\n   * value, given a function that operates on the path to a node, an optional\r\n   * current value, and a map of child names to folded subtrees\r\n   */\n  fold(fn) {\n    return this.fold_(newEmptyPath(), fn);\n  }\n  /**\r\n   * Recursive helper for public-facing fold() method\r\n   */\n  fold_(pathSoFar, fn) {\n    const accum = {};\n    this.children.inorderTraversal((childKey, childTree) => {\n      accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  }\n  /**\r\n   * Find the first matching value on the given path. Return the result of applying f to it.\r\n   */\n  findOnPath(path, f) {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n  findOnPath_(pathToFollow, pathSoFar, f) {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow);\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n  foreachOnPath(path, f) {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n  foreachOnPath_(pathToFollow, currentRelativePath, f) {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\r\n   * Calls the given function for each node in the tree that has a value.\r\n   *\r\n   * @param f - A function to be called with the path from the root of the tree to\r\n   * a node, and the value at that node. Called in depth-first order.\r\n   */\n  foreach(f) {\n    this.foreach_(newEmptyPath(), f);\n  }\n  foreach_(currentRelativePath, f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n  foreachChild(f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\nclass CompoundWrite {\n  constructor(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n  static empty() {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n  let newWrite = compoundWrite;\n  each(updates, (childKey, node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n    return new CompoundWrite(newWriteTree);\n  }\n}\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n  const children = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n        children.push(new NamedNode(childName, childNode));\n      });\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value != null) {\n        children.push(new NamedNode(childName, childTree.value));\n      }\n    });\n  }\n  return children;\n}\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\nfunction compoundWriteIsEmpty(compoundWrite) {\n  return compoundWrite.writeTree_.isEmpty();\n}\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\nfunction compoundWriteApply(compoundWrite, node) {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\n    }\n    return node;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\nfunction writeTreeChildWrites(writeTree, path) {\n  return newWriteTreeRef(path, writeTree);\n}\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n  }\n  writeTree.lastWriteId = writeId;\n}\n/**\r\n * Record a new merge from user code.\r\n */\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n  writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n  writeTree.lastWriteId = writeId;\n}\nfunction writeTreeGetWrite(writeTree, writeId) {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n  let i = writeTree.allWrites.length - 1;\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n    } else {\n      const children = writeToRemove.children;\n      each(children, childName => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n      });\n    }\n    return true;\n  }\n}\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\nfunction writeTreeResetTree_(writeTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\nfunction writeTreeDefaultFilter_(write) {\n  return write.visible;\n}\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n        } else ;\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n            }\n          }\n        } else ;\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n        return null;\n      } else {\n        const filter = function (write) {\n          return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (pathContains(write.path, treePath) || pathContains(treePath, write.path));\n        };\n        const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n  let completeChildren = ChildrenNode.EMPTY_NODE;\n  const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\n      completeChildren = completeChildren.updateImmediateChild(childName, node);\n    });\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  }\n}\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n  assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n    }\n  }\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n      return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n    } else {\n      return null;\n    }\n  }\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\nfunction writeTreeShadowingWrite(writeTree, path) {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n  let toIterate;\n  const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\nfunction newWriteTree() {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n  return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n  return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n  return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n  return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n  return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\nfunction writeTreeRefChild(writeTreeRef, childName) {\n  return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\nfunction newWriteTreeRef(path, writeTree) {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ChildChangeAccumulator {\n  constructor() {\n    this.changeMap = new Map();\n  }\n  trackChildChange(change) {\n    const type = change.type;\n    const childKey = change.childName;\n    assert(type === \"child_added\" /* CHILD_ADDED */ || type === \"child_changed\" /* CHILD_CHANGED */ || type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\n    assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type === \"child_added\" /* CHILD_ADDED */ && oldType === \"child_removed\" /* CHILD_REMOVED */) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n      } else if (type === \"child_removed\" /* CHILD_REMOVED */ && oldType === \"child_added\" /* CHILD_ADDED */) {\n        this.changeMap.delete(childKey);\n      } else if (type === \"child_removed\" /* CHILD_REMOVED */ && oldType === \"child_changed\" /* CHILD_CHANGED */) {\n        this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n      } else if (type === \"child_changed\" /* CHILD_CHANGED */ && oldType === \"child_added\" /* CHILD_ADDED */) {\n        this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n      } else if (type === \"child_changed\" /* CHILD_CHANGED */ && oldType === \"child_changed\" /* CHILD_CHANGED */) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n      } else {\n        throw assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n  getChanges() {\n    return Array.from(this.changeMap.values());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass NoCompleteChildSource_ {\n  getCompleteChild(childKey) {\n    return null;\n  }\n  getChildAfterChild(index, child, reverse) {\n    return null;\n  }\n}\n/**\r\n * Singleton instance.\r\n */\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\nclass WriteTreeCompleteChildSource {\n  constructor(writes_, viewCache_) {\n    let optCompleteServerCache_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n  getCompleteChild(childKey) {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(index, child, reverse) {\n    const completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newViewProcessor(filter) {\n  return {\n    filter\n  };\n}\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n  assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n  assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);\n      newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return {\n    viewCache: newViewCache,\n    changes\n  };\n}\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n      accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n    }\n  }\n}\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n  }\n}\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n    } else {\n      newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n  const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n    newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n      newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (pathGetBack(childChangePath) === '.priority' && childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  return curViewCache;\n}\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) {\n    return viewCache;\n  }\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  return curViewCache;\n}\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n      return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n      }\n    });\n    return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n  }\n}\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n        newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n      }\n      newNode = newNode;\n      newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n      if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n        }\n      }\n    }\n    complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\nclass View {\n  constructor(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    const params = this.query_._queryParams;\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n    this.processor_ = newViewProcessor(filter);\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n  get query() {\n    return this.query_;\n  }\n}\nfunction viewGetServerCache(view) {\n  return view.viewCache_.serverCache.getNode();\n}\nfunction viewGetCompleteNode(view) {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\nfunction viewGetCompleteServerCache(view, path) {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\nfunction viewIsEmpty(view) {\n  return view.eventRegistrations_.length === 0;\n}\nfunction viewAddEventRegistration(view, eventRegistration) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n  const cancelEvents = [];\n  if (cancelError) {\n    assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n  if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n    assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n    assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n  }\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n  assert(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n  view.viewCache_ = result.viewCache;\n  return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\nfunction viewGetInitialEvents(view, registration) {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode();\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n  const registrations = eventRegistration ? [eventRegistration] : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet referenceConstructor$1;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\nclass SyncPoint {\n  constructor() {\n    /**\r\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n     * queryId and the value is the View for that query.\r\n     *\r\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n     */\n    this.views = new Map();\n  }\n}\nfunction syncPointSetReferenceConstructor(val) {\n  assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\n  referenceConstructor$1 = val;\n}\nfunction syncPointGetReferenceConstructor() {\n  assert(referenceConstructor$1, 'Reference.ts has not been loaded');\n  return referenceConstructor$1;\n}\nfunction syncPointIsEmpty(syncPoint) {\n  return syncPoint.views.size === 0;\n}\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n  } else {\n    let events = [];\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\n    }\n    return events;\n  }\n}\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n    return new View(query, viewCache);\n  }\n  return view;\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n  const queryId = query._queryIdentifier;\n  const removed = [];\n  let cancelEvents = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n  }\n  return {\n    removed,\n    events: cancelEvents\n  };\n}\nfunction syncPointGetQueryViews(syncPoint) {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n  let serverCache = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\nfunction syncPointViewForQuery(syncPoint, query) {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\nfunction syncPointHasCompleteView(syncPoint) {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\nfunction syncPointGetCompleteView(syncPoint) {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet referenceConstructor;\nfunction syncTreeSetReferenceConstructor(val) {\n  assert(!referenceConstructor, '__referenceConstructor has already been defined');\n  referenceConstructor = val;\n}\nfunction syncTreeGetReferenceConstructor() {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n/**\r\n * Static tracker for next query tag.\r\n */\nlet syncTreeNextQueryTag_ = 1;\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\nclass SyncTree {\n  /**\r\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n   *   to server data.\r\n   */\n  constructor(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\r\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n     */\n    this.syncPointTree_ = new ImmutableTree(null);\n    /**\r\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n     */\n    this.pendingWriteTree_ = newWriteTree();\n    this.tagToQueryMap = new Map();\n    this.queryToTagMap = new Map();\n  }\n}\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n  // Record pending write.\n  writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n  }\n}\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\nfunction syncTreeAckUserWrite(syncTree, writeId) {\n  let revert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, pathString => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\n  }\n}\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyListenComplete(syncTree, path) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\r\n *  deduping needs to take place. This flag allows toggling of that behavior\r\n * @returns Cancel events, if cancelError was provided.\r\n */\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\n  let skipListenerDedup = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (maybeSyncPoint && (query._queryIdentifier === 'default' || syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n    const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    if (!skipListenerDedup) {\n      /**\r\n       * We may have just removed one of many listeners and can short-circuit this whole process\r\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n       * properly set up.\r\n       */\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault = -1 !== removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n      const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag = null;\n          syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n        } else {\n          removed.forEach(queryToRemove => {\n            const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  }\n  return cancelEvents;\n}\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\n  let skipSetupListener = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const path = query._path;\n  let serverCache = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(childName, completeCache);\n      }\n    });\n  }\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\n    const relativePath = newRelativePath(pathSoFar, path);\n    const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n    if (serverCache) {\n      return serverCache;\n    }\n  });\n  return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\nfunction syncTreeGetServerValue(syncTree, query) {\n  const path = query._path;\n  let serverCache = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode = serverCacheComplete ? new CacheNode(serverCache, true, false) : null;\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n  return viewGetCompleteNode(view);\n}\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n  return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, /*serverCache=*/null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    let events = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n    if (syncPoint) {\n      events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n    return events;\n  }\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  let events = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n  });\n  if (syncPoint) {\n    events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n  }\n  return events;\n}\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: status => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(syncTree, query, /*eventRegistration*/null, error);\n      }\n    }\n  };\n}\n/**\r\n * Return the tag associated with the given query.\r\n */\nfunction syncTreeTagForQuery(syncTree, query) {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\nfunction syncTreeMakeQueryKey_(query) {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n  return syncTree.tagToQueryMap.get(tag);\n}\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\nfunction syncTreeParseQueryKey_(queryKey) {\n  const splitIndex = queryKey.indexOf('$');\n  assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n/**\r\n * A helper method to apply tagged operations\r\n */\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n  return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key, childViews) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\nfunction syncTreeQueryForListening_(query) {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\nfunction syncTreeRemoveTags_(syncTree, queries) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n/**\r\n * Static accessor for query tags.\r\n */\nfunction syncTreeGetNextQueryTag_() {\n  return syncTreeNextQueryTag_++;\n}\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\nfunction syncTreeSetupListener_(syncTree, query, view) {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n  const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n      if (!pathIsEmpty(relativePath) && maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n        return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n      } else {\n        // No default listener here, flatten any deeper queries into an array\n        let queries = [];\n        if (maybeChildSyncPoint) {\n          queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\n        }\n        each(childMap, (_key, childQueries) => {\n          queries = queries.concat(childQueries);\n        });\n        return queries;\n      }\n    });\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\n    }\n  }\n  return events;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ExistingValueProvider {\n  constructor(node_) {\n    this.node_ = node_;\n  }\n  getImmediateChild(childName) {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n  node() {\n    return this.node_;\n  }\n}\nclass DeferredValueProvider {\n  constructor(syncTree, path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n  getImmediateChild(childName) {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n  node() {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n/**\r\n * Generate placeholders for deferred values.\r\n */\nconst generateWithValues = function (values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'];\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\nconst resolveComplexDeferredValue = function (op, existing, unused) {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n  const existingNode = existing.node();\n  assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n  const leaf = existingNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n  const rawPri = node.getPriority().val();\n  const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n  let newNode;\n  if (node.isLeafNode()) {\n    const leafNode = node;\n    const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\nclass Tree {\n  /**\r\n   * @param name - Optional name of the node.\r\n   * @param parent - Optional parent node.\r\n   * @param node - Optional node to wrap.\r\n   */\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      children: {},\n      childCount: 0\n    };\n    this.name = name;\n    this.parent = parent;\n    this.node = node;\n  }\n}\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\nfunction treeSubTree(tree, pathObj) {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n  return child;\n}\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\nfunction treeGetValue(tree) {\n  return tree.node.value;\n}\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\nfunction treeSetValue(tree, value) {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n/**\r\n * @returns Whether the tree has any children.\r\n */\nfunction treeHasChildren(tree) {\n  return tree.node.childCount > 0;\n}\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\nfunction treeIsEmpty(tree) {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\nfunction treeForEachChild(tree, action) {\n  each(tree.node.children, (child, childTree) => {\n    action(new Tree(child, tree, childTree));\n  });\n}\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\nfunction treeForEachAncestor(tree, action, includeSelf) {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\nfunction treeGetPath(tree) {\n  return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\nfunction treeUpdateParents(tree) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\nfunction treeUpdateChild(tree, childName, child) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * True for invalid Firebase keys\r\n */\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\nconst isValidKey = function (key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\nconst isValidPathString = function (pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\nconst isValidRootPathString = function (pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n  return isValidPathString(pathString);\n};\nconst isValidPriority = function (priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' &&\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  contains(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\n  if (optional && value === undefined) {\n    return;\n  }\n  validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\nconst validateFirebaseData = function (errorPrefix, data, path_) {\n  const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n  }\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + validationPathToErrorString(path) + ' with contents = ' + data.toString());\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + validationPathToErrorString(path));\n  }\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + validationPathToErrorString(path) + \" ('\" + data.substring(0, 50) + \"...')\");\n  }\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key, value) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + validationPathToErrorString(path) + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n    if (hasDotValue && hasActualChild) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + validationPathToErrorString(path) + ' in addition to actual children.');\n    }\n  }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  }\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n    prevPath = curPath;\n  }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n  const errorPrefix$1 = errorPrefix(fnName, 'values');\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n  }\n  const mergePaths = [];\n  each(data, (key, value) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix$1 + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\nconst validatePriority = function (fnName, priority, optional) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n  }\n};\nconst validateKey = function (fnName, argumentName, key, optional) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n  }\n};\n/**\r\n * @internal\r\n */\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n  if (!isValidPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n  }\n};\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n/**\r\n * @internal\r\n */\nconst validateWritablePath = function (fnName, path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\nconst validateUrl = function (fnName, parsedUrl) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, 'url') + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\nclass EventQueue {\n  constructor() {\n    this.eventLists_ = [];\n    /**\r\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n     */\n    this.recursionDepth_ = 0;\n  }\n}\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n    if (currList === null) {\n      currList = {\n        events: [],\n        path\n      };\n    }\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath));\n}\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n  eventQueue.recursionDepth_++;\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n  eventQueue.recursionDepth_--;\n}\n/**\r\n * Iterates through the list and raises each event\r\n */\nfunction eventListRaise(eventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n/**\r\n * A connection to a single data repository.\r\n */\nclass Repo {\n  constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n    this.repoInfo_ = repoInfo_;\n    this.forceRestClient_ = forceRestClient_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckProvider_ = appCheckProvider_;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n    this.onDisconnect_ = newSparseSnapshotTree();\n    /** Stores queues of outstanding transactions for Firebase locations. */\n    this.transactionQueueTree_ = new Tree();\n    // TODO: This should be @private but it's used by test_access.js and internal.js\n    this.persistentConnection_ = null;\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n  /**\r\n   * @returns The URL corresponding to the root of this Firebase.\r\n   */\n  toString() {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  }\n}\nfunction repoStart(repo, appId, authOverride) {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, repo.authTokenProvider_, repo.appCheckProvider_);\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n    repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, connectStatus => {\n      repoOnConnectStatus(repo, connectStatus);\n    }, updates => {\n      repoOnServerInfoUpdate(repo, updates);\n    }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n    repo.server_ = repo.persistentConnection_;\n  }\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\nfunction repoServerTime(repo) {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = offsetNode.val() || 0;\n  return new Date().getTime() + offset;\n}\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\nfunction repoGenerateServerValues(repo) {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(data, raw => nodeFromJSON(raw));\n      events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n    }\n  } else if (isMerge) {\n    const changedChildren = map(data, raw => nodeFromJSON(raw));\n    events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\nfunction repoOnConnectStatus(repo, connectStatus) {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\nfunction repoOnServerInfoUpdate(repo, updates) {\n  each(updates, (key, value) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\nfunction repoUpdateInfo(repo, pathString, value) {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\nfunction repoGetNextWriteId(repo) {\n  return repo.nextWriteId_++;\n}\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\nfunction repoGetValue(repo, query, eventRegistration) {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(payload => {\n    const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n    /**\r\n     * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\r\n     * Add an event registration,\r\n     * Update data at the path,\r\n     * Raise any events,\r\n     * Cleanup the SyncTree\r\n     */\n    syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\n    let events;\n    if (query._queryParams.loadsAllData()) {\n      events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n    } else {\n      const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\n    }\n    /*\r\n     * We need to raise events in the scenario where `get()` is called at a parent path, and\r\n     * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\r\n     * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\r\n     * and its corresponding serverCache, including the child location where `onValue` is called. Then,\r\n     * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\r\n     * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\r\n     * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\r\n     * ensure the corresponding child events will get fired.\r\n     */\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n    syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\n    return node;\n  }, err => {\n    repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n    return Promise.reject(new Error(err));\n  });\n}\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(path.toString(), newNodeUnresolved.val( /*export=*/true), (status, errorReason) => {\n    const success = status === 'ok';\n    if (!success) {\n      warn('set at ' + path + ' failed: ' + status);\n    }\n    const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n  repoLog(repo, 'update', {\n    path: path.toString(),\n    value: childrenToMerge\n  });\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren = {};\n  each(childrenToMerge, (changedKey, changedValue) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n  });\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('update at ' + path + ' failed: ' + status);\n      }\n      const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n      const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    each(childrenToMerge, changedPath => {\n      const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n      repoRerunTransactions(repo, affectedPath);\n    });\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\nfunction repoRunOnDisconnectEvents(repo) {\n  repoLog(repo, 'onDisconnectEvents');\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\n    const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n    sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n  });\n  let events = [];\n  sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\n    events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n    const affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n  });\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val( /*export=*/true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val( /*export=*/true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n  repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\n    if (status === 'ok') {\n      each(childrenToMerge, (childName, childNode) => {\n        const newChildNode = nodeFromJSON(childNode);\n        sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n      });\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoInterrupt(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\nfunction repoResume(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\nfunction repoLog(repo) {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  for (var _len6 = arguments.length, varArgs = new Array(_len6 > 1 ? _len6 - 1 : 0), _key7 = 1; _key7 < _len6; _key7++) {\n    varArgs[_key7 - 1] = arguments[_key7];\n  }\n  log(prefix, ...varArgs);\n}\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n        const error = new Error(message);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        error.code = code;\n        callback(error);\n      }\n    });\n  }\n}\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n  repoLog(repo, 'transaction on ' + path);\n  // Initialize transaction.\n  const transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n    // Mark as run and add to our queue.\n    transaction.status = 0 /* RUN */;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n    treeSetValue(queueNode, nodeQueue);\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (typeof newVal === 'object' && newVal !== null && contains(newVal, '.priority')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\nfunction repoGetLatestState(repo, path, excludeSets) {\n  return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;\n}\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\nfunction repoSendReadyTransactions(repo) {\n  let node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : repo.transactionQueueTree_;\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n    const allRun = queue.every(transaction => transaction.status === 0 /* RUN */);\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\nfunction repoSendTransactionQueue(repo, path, queue) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = 1 /* SENT */;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\n  }\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n  // Send the put.\n  repo.server_.put(pathToSend.toString(), dataToSend, status => {\n    repoLog(repo, 'transaction put response', {\n      path: pathToSend.toString(),\n      status\n    });\n    let events = [];\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our\n      // transaction state, since the callback could trigger more\n      // transactions or sets.\n      const callbacks = [];\n      for (let i = 0; i < queue.length; i++) {\n        queue[i].status = 2 /* COMPLETED */;\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this\n          // transaction is complete, it should be set\n          callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\n        }\n        queue[i].unwatcher();\n      }\n      // Now remove the completed transactions.\n      repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\n      // There may be pending transactions that we can now send.\n      repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n      // Finally, trigger onComplete callbacks.\n      for (let i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (let i = 0; i < queue.length; i++) {\n          if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\n            queue[i].status = 4 /* NEEDS_ABORT */;\n          } else {\n            queue[i].status = 0 /* RUN */;\n          }\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = 4 /* NEEDS_ABORT */;\n          queue[i].abortReason = status;\n        }\n      }\n      repoRerunTransactions(repo, path);\n    }\n  }, latestHash);\n}\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\nfunction repoRerunTransactions(repo, changedPath) {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n  const path = treeGetPath(rootMostTransactionNode);\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n  return path;\n}\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\nfunction repoRerunTransactionQueue(repo, queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === 0 /* RUN */;\n  });\n\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n    if (transaction.status === 4 /* NEEDS_ABORT */) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n    } else if (transaction.status === 0 /* RUN */) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority = typeof newData === 'object' && newData != null && contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = 2 /* COMPLETED */;\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\n        } else {\n          callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\n        }\n      }\n    }\n  }\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\nfunction repoGetAncestorTransactionNode(repo, path) {\n  let front;\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n  return transactionNode;\n}\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue = [];\n  repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n  return transactionQueue;\n}\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== 2 /* COMPLETED */) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\nfunction repoAbortTransactions(repo, path) {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n  treeForEachAncestor(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  repoAbortTransactionsOnNode(repo, transactionNode);\n  treeForEachDescendant(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  return affectedPath;\n}\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\nfunction repoAbortTransactionsOnNode(repo, node) {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;else if (queue[i].status === 1 /* SENT */) {\n        assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = 3 /* SENT_NEEDS_ABORT */;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n        if (queue[i].onComplete) {\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction decodePath(pathString) {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n/**\r\n * @returns key value hash\r\n */\nfunction decodeQuery(queryString) {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  }\n  // Catch common error of uninitialized namespace value.\n  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, /*persistenceKey=*/'', /*includeNamespaceInQueryParams=*/namespace !== parsedUrl.subdomain),\n    path: new Path(parsedUrl.pathString)\n  };\n};\nconst parseDatabaseURL = function (dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\nclass DataEvent {\n  /**\r\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n   * @param eventRegistration - The function to call to with the event data. User provided\r\n   * @param snapshot - The data backing the event\r\n   * @param prevName - Optional, the name of the previous child for child_* events.\r\n   */\n  constructor(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n  getPath() {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType() {\n    return this.eventType;\n  }\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString() {\n    return this.getPath().toString() + ':' + this.eventType + ':' + stringify(this.snapshot.exportVal());\n  }\n}\nclass CancelEvent {\n  constructor(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n  getPath() {\n    return this.path;\n  }\n  getEventType() {\n    return 'cancel';\n  }\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString() {\n    return this.path.toString() + ':cancel';\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\nclass CallbackContext {\n  constructor(snapshotCallback, cancelCallback) {\n    this.snapshotCallback = snapshotCallback;\n    this.cancelCallback = cancelCallback;\n  }\n  onValue(expDataSnapshot, previousChildName) {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n  onCancel(error) {\n    assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n    return this.cancelCallback.call(null, error);\n  }\n  get hasCancelCallback() {\n    return !!this.cancelCallback;\n  }\n  matches(other) {\n    return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback !== undefined && this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\nclass OnDisconnect {\n  /** @hideconstructor */\n  constructor(_repo, _path) {\n    this._repo = _repo;\n    this._path = _path;\n  }\n  /**\r\n   * Cancels all previously queued `onDisconnect()` set or update events for this\r\n   * location and all children.\r\n   *\r\n   * If a write has been queued for this location via a `set()` or `update()` at a\r\n   * parent location, the write at this location will be canceled, though writes\r\n   * to sibling locations will still occur.\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n  cancel() {\n    const deferred = new Deferred();\n    repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is deleted when the client is disconnected\r\n   * (due to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n  remove() {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is set to the specified value when the\r\n   * client is disconnected (due to closing the browser, navigating to a new page,\r\n   * or network issues).\r\n   *\r\n   * `set()` is especially useful for implementing \"presence\" systems, where a\r\n   * value should be changed or cleared when a user disconnects so that they\r\n   * appear \"offline\" to other users. See\r\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n   * for more information.\r\n   *\r\n   * Note that `onDisconnect` operations are only triggered once. If you want an\r\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n   * the `onDisconnect` operations each time.\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  set(value) {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is set to the specified value and priority\r\n   * when the client is disconnected (due to closing the browser, navigating to a\r\n   * new page, or network issues).\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @param priority - The priority to be written (string, number, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  setWithPriority(value, priority) {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Writes multiple values at this location when the client is disconnected (due\r\n   * to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * The `values` argument contains multiple property-value pairs that will be\r\n   * written to the Database together. Each child property can either be a simple\r\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n   * from the current location to the data to update.\r\n   *\r\n   * As opposed to the `set()` method, `update()` can be use to selectively update\r\n   * only the referenced properties at the current location (instead of replacing\r\n   * all the child properties at the current location).\r\n   *\r\n   * @param values - Object containing multiple values.\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  update(values) {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @internal\r\n */\nclass QueryImpl {\n  /**\r\n   * @hideconstructor\r\n   */\n  constructor(_repo, _path, _queryParams, _orderByCalled) {\n    this._repo = _repo;\n    this._path = _path;\n    this._queryParams = _queryParams;\n    this._orderByCalled = _orderByCalled;\n  }\n  get key() {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n  get ref() {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n  get _queryIdentifier() {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n  /**\r\n   * An object representation of the query parameters used by this Query.\r\n   */\n  get _queryObject() {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n  isEqual(other) {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n  toJSON() {\n    return this.toString();\n  }\n  toString() {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n/**\r\n * Validates that no other order by call has been made\r\n */\nfunction validateNoPreviousOrderByCall(query, fnName) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n/**\r\n * Validates start/end values for queries.\r\n */\nfunction validateQueryEndpoints(params) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' + 'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n      throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' + '(null, a number, or a string).');\n    }\n  } else {\n    assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n    if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n      throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' + 'equalTo() cannot be an object.');\n    }\n  }\n}\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\nfunction validateLimit(params) {\n  if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n    throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" + 'limitToFirst() or limitToLast() instead.');\n  }\n}\n/**\r\n * @internal\r\n */\nclass ReferenceImpl extends QueryImpl {\n  /** @hideconstructor */\n  constructor(repo, path) {\n    super(repo, path, new QueryParams(), false);\n  }\n  get parent() {\n    const parentPath = pathParent(this._path);\n    return parentPath === null ? null : new ReferenceImpl(this._repo, parentPath);\n  }\n  get root() {\n    let ref = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\nclass DataSnapshot {\n  /**\r\n   * @param _node - A SnapshotNode to wrap.\r\n   * @param ref - The location this snapshot came from.\r\n   * @param _index - The iteration order for this snapshot\r\n   * @hideconstructor\r\n   */\n  constructor(_node,\n  /**\r\n   * The location of this DataSnapshot.\r\n   */\n  ref, _index) {\n    this._node = _node;\n    this.ref = ref;\n    this._index = _index;\n  }\n  /**\r\n   * Gets the priority value of the data in this `DataSnapshot`.\r\n   *\r\n   * Applications need not use priority but can order collections by\r\n   * ordinary properties (see\r\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n   * ).\r\n   */\n  get priority() {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val();\n  }\n  /**\r\n   * The key (last part of the path) of the location of this `DataSnapshot`.\r\n   *\r\n   * The last token in a Database location is considered its key. For example,\r\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n   * `DataSnapshot` will return the key for the location that generated it.\r\n   * However, accessing the key on the root URL of a Database will return\r\n   * `null`.\r\n   */\n  get key() {\n    return this.ref.key;\n  }\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size() {\n    return this._node.numChildren();\n  }\n  /**\r\n   * Gets another `DataSnapshot` for the location at the specified relative path.\r\n   *\r\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n   * another `DataSnapshot` for the location at the specified relative path. The\r\n   * relative path can either be a simple child name (for example, \"ada\") or a\r\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n   * whose value is `null`) is returned.\r\n   *\r\n   * @param path - A relative path to the location of child data.\r\n   */\n  child(path) {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n  }\n  /**\r\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n   * efficient than using `snapshot.val() !== null`.\r\n   */\n  exists() {\n    return !this._node.isEmpty();\n  }\n  /**\r\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n   *\r\n   * The `exportVal()` method is similar to `val()`, except priority information\r\n   * is included (if available), making it suitable for backing up your data.\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal() {\n    return this._node.val(true);\n  }\n  /**\r\n   * Enumerates the top-level children in the `DataSnapshot`.\r\n   *\r\n   * Because of the way JavaScript objects work, the ordering of data in the\r\n   * JavaScript object returned by `val()` is not guaranteed to match the\r\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n   * where `forEach()` comes in handy. It guarantees the children of a\r\n   * `DataSnapshot` will be iterated in their query order.\r\n   *\r\n   * If no explicit `orderBy*()` method is used, results are returned\r\n   * ordered by key (unless priorities are used, in which case, results are\r\n   * returned by priority).\r\n   *\r\n   * @param action - A function that will be called for each child DataSnapshot.\r\n   * The callback can return true to cancel further enumeration.\r\n   * @returns true if enumeration was canceled due to your callback returning\r\n   * true.\r\n   */\n  forEach(action) {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n    const childrenNode = this._node;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\n    });\n  }\n  /**\r\n   * Returns true if the specified child path has (non-null) data.\r\n   *\r\n   * @param path - A relative path to the location of a potential child.\r\n   * @returns `true` if data exists at the specified child path; else\r\n   *  `false`.\r\n   */\n  hasChild(path) {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n  /**\r\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n   * properties.\r\n   *\r\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n   * children. If it does, you can enumerate them using `forEach()`. If it\r\n   * doesn't, then either this snapshot contains a primitive value (which can be\r\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n   * `null`).\r\n   *\r\n   * @returns true if this snapshot has any children; else false.\r\n   */\n  hasChildren() {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n  /**\r\n   * Returns a JSON-serializable representation of this object.\r\n   */\n  toJSON() {\n    return this.exportVal();\n  }\n  /**\r\n   * Extracts a JavaScript value from a `DataSnapshot`.\r\n   *\r\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n   * scalar type (string, number, or boolean), an array, or an object. It may\r\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n   * data).\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val() {\n    return this._node.val();\n  }\n}\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\nfunction ref(db, path) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\nfunction refFromURL(db, url) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n  const repoInfo = parsedURL.repoInfo;\n  if (!db._repo.repoInfo_.isCustomHost() && repoInfo.host !== db._repo.repoInfo_.host) {\n    fatal('refFromURL' + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + db._repo.repoInfo_.host + ')');\n  }\n  return ref(db, parsedURL.path.toString());\n}\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\nfunction child(parent, path) {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\nfunction onDisconnect(ref) {\n  ref = getModularInstance(ref);\n  return new OnDisconnect(ref._repo, ref._path);\n}\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\r\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\nfunction push(parent, value) {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef = child(parent, name);\n  const pushRef = child(parent, name);\n  let promise;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef;\n}\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\nfunction remove(ref) {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction set(ref, value) {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, /*priority=*/null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction setPriority(ref, priority) {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction setWithPriority(ref, value, priority) {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\nfunction update(ref, values) {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred();\n  repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\nfunction get(query) {\n  query = getModularInstance(query);\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n  });\n}\n/**\r\n * Represents registration for 'value' events.\r\n */\nclass ValueEventRegistration {\n  constructor(callbackContext) {\n    this.callbackContext = callbackContext;\n  }\n  respondsTo(eventType) {\n    return eventType === 'value';\n  }\n  createEvent(change, query) {\n    const index = query._queryParams.getIndex();\n    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n  }\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, null);\n    }\n  }\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n  matches(other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n  hasAnyCallback() {\n    return this.callbackContext !== null;\n  }\n}\n/**\r\n * Represents the registration of a child_x event.\r\n */\nclass ChildEventRegistration {\n  constructor(eventType, callbackContext) {\n    this.eventType = eventType;\n    this.callbackContext = callbackContext;\n  }\n  respondsTo(eventType) {\n    let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n  createEvent(change, query) {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\n    const index = query._queryParams.getIndex();\n    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\n  }\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n    }\n  }\n  matches(other) {\n    if (other instanceof ChildEventRegistration) {\n      return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));\n    }\n    return false;\n  }\n  hasAnyCallback() {\n    return !!this.callbackContext;\n  }\n}\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n  let cancelCallback;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n  const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n  const container = eventType === 'value' ? new ValueEventRegistration(callbackContext) : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\nfunction off(query, eventType, callback) {\n  let container = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\nclass QueryConstraint {}\nclass QueryEndAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endAt: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\nfunction endAt(value, key) {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endBefore: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value less than or equal\r\n * to the specified value and a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\nfunction endBefore(value, key) {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\nclass QueryStartAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAt: Starting point was already set (by another call to startAt, ' + 'startBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\nfunction startAt() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let key = arguments.length > 1 ? arguments[1] : undefined;\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\nclass QueryStartAfterConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAfter: Starting point was already set (by another call to startAt, ' + 'startAfter, or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\nfunction startAfter(value, key) {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n  }\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\nfunction limitToFirst(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n  }\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\nfunction limitToLast(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n  return new QueryLimitToLastConstraint(limit);\n}\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  constructor(_path) {\n    super();\n    this._path = _path;\n  }\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\nfunction orderByChild(path) {\n  if (path === '$key') {\n    throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n  } else if (path === '$priority') {\n    throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n  } else if (path === '$value') {\n    throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\nfunction orderByKey() {\n  return new QueryOrderByKeyConstraint();\n}\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\nfunction orderByPriority() {\n  return new QueryOrderByPriorityConstraint();\n}\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\nfunction orderByValue() {\n  return new QueryOrderByValueConstraint();\n}\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' + 'equalTo).');\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' + 'equalTo).');\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n  }\n}\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\nfunction equalTo(value, key) {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\nfunction query(query) {\n  let queryImpl = getModularInstance(query);\n  for (var _len7 = arguments.length, queryConstraints = new Array(_len7 > 1 ? _len7 - 1 : 0), _key8 = 1; _key8 < _len7; _key8++) {\n    queryConstraints[_key8 - 1] = arguments[_key8];\n  }\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\r\n * Creates and caches `Repo` instances.\r\n */\nconst repos = {};\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\nlet useRestClient = false;\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\n  repo.repoInfo_ = new RepoInfo(`${host}:${port}`, /* secure= */false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n  let dbUrl = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\"Can't determine Firebase Database URL. Be sure to include \" + ' a Project ID when calling firebase.initializeApp().');\n    }\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n  let isEmulator;\n  let dbEmulatorHost = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n  const authTokenProvider = nodeAdmin && isEmulator ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER) : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n  }\n  const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\n  return new Database(repo, app);\n}\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\nfunction repoManagerDeleteRepo(repo, appName) {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n  let appRepos = repos[app.name];\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n  return repo;\n}\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\nfunction repoManagerForceRestClient(forceRestClient) {\n  useRestClient = forceRestClient;\n}\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\nclass Database {\n  /** @hideconstructor */\n  constructor(_repoInternal, /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n  app) {\n    this._repoInternal = _repoInternal;\n    this.app = app;\n    /** Represents a `Database` instance. */\n    this['type'] = 'database';\n    /** Track if the instance has been used (root or repo accessed) */\n    this._instanceStarted = false;\n  }\n  get _repo() {\n    if (!this._instanceStarted) {\n      repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n  get _root() {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n  _delete() {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n  _checkNotDeleted(apiName) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\n  }\n}\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\nfunction forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\nfunction forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\nfunction getDatabase() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  let url = arguments.length > 1 ? arguments[1] : undefined;\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('database');\n  if (emulator) {\n    connectDatabaseEmulator(db, ...emulator);\n  }\n  return db;\n}\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\nfunction connectDatabaseEmulator(db, host, port) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal('Cannot call useEmulator() after instance has already been initialized.');\n  }\n  const repo = db._repoInternal;\n  let tokenProvider = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token = typeof options.mockUserToken === 'string' ? options.mockUserToken : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\nfunction goOffline(db) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\nfunction goOnline(db) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\nfunction enableLogging(logger, persistent) {\n  enableLogging$1(logger, persistent);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction registerDatabase(variant) {\n  setSDKVersion(SDK_VERSION$1);\n  _registerComponent(new Component('database', (container, _ref2) => {\n    let {\n      instanceIdentifier: url\n    } = _ref2;\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const appCheckProvider = container.getProvider('app-check-internal');\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\n  }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\nfunction serverTimestamp() {\n  return SERVER_TIMESTAMP;\n}\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\nfunction increment(delta) {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\nclass TransactionResult {\n  /** @hideconstructor */\n  constructor( /** Whether the transaction was successfully committed. */\n  committed, /** The resulting data snapshot. */\n  snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON() {\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  }\n}\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\nfunction runTransaction(ref,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n  var _a;\n  ref = getModularInstance(ref);\n  validateWritablePath('Reference.transaction', ref._path);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'Reference.transaction failed: ' + ref.key + ' is a read-only object.';\n  }\n  const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\n  const deferred = new Deferred();\n  const promiseComplete = (error, committed, node) => {\n    let dataSnapshot = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n  repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n  return deferred.promise;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nPersistentConnection;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n};\n// RealTimeConnection properties that we use in tests.\nConnection;\n/**\r\n * @internal\r\n */\nconst hijackHash = function (newHash) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\nRepoInfo;\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\nconst forceRestClient = function (forceRestClient) {\n  repoManagerForceRestClient(forceRestClient);\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\nregisterDatabase();\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };","map":{"version":3,"names":["_getProvider","getApp","SDK_VERSION","SDK_VERSION$1","_registerComponent","registerVersion","Component","stringify","jsonEval","contains","assert","isNodeSdk","stringToByteArray","Sha1","base64","deepCopy","base64Encode","isMobileCordova","stringLength","Deferred","safeGet","isAdmin","isValidFormat","isEmpty","isReactNative","assertionError","map","querystring","errorPrefix","getModularInstance","getDefaultEmulatorHostnameAndPort","createMockUserToken","Logger","LogLevel","name","version","setSDKVersion","DOMStorageWrapper","constructor","domStorage_","prefix_","set","key","value","removeItem","prefixedName_","setItem","get","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","str","utf8Bytes","update","sha1Bytes","digest","encodeByteArray","buildLogMessage_","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging$1","logger_","persistent","logLevel","VERBOSE","log","bind","varArgs","logWrapper","prefix","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","document","readyState","called","wrappedFn","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","optional","then","getToken","forceRefresh","Promise","resolve","reject","addTokenChangeListener","listener","_a","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","type","params","connURL","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","callback","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","options","device","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","String","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","token","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","online_","getInstance","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","pop","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","deferred","request","p","q","_queryObject","outstandingGet","index","sendGet_","promise","listen","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","tryAppCheck","authMethod","requestData","cred","res","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","undefined","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","console","replace","queries","values","clientName","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","val","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","setMaxNode$1","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","nodeFromJSON$1","MAX_NODE$1","setNodeFromJSON","setMaxNode","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","next","newIndex","indexName","newIndexSet","Object","assign","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON","json","jsonLeaf","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","childData","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","MIN_PUSH_CHAR","MAX_PUSH_CHAR","MAX_KEY_LEN","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","charAt","successor","keyAsInt","source","sourcePlusOne","repeat","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasStartAfter","hasEndBefore","hasLimit","hasAnchoredLimit","queryParamsGetNodeFilter","queryParams","queryParamsLimitToFirst","newLimit","newParams","queryParamsLimitToLast","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsOrderBy","queryParamsToRestQueryStringParameters","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","getListenId_","listenId","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForget","tree","safeToRemove","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","forEach","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","eventGeneratorGenerateEventsForType","registrations","filteredChanges","filter","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","layeredCache","mergeAtPath","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","from","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorAckUserWrite","viewProcessorRevertUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","eventRegistrations_","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteNode","viewGetCompleteServerCache","cache","viewIsEmpty","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor$1","SyncPoint","views","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","entries","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","referenceConstructor","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeGetServerValue","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","splitIndex","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","fnName","validateFirebaseData","hasDotValue","hasActualChild","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","errorPrefix$1","validatePriority","validateKey","argumentName","validatePathString","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoOnServerInfoUpdate","statsReporter_","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","repoServerTime","offsetNode","offset","repoGenerateServerValues","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoGetValue","cached","err","repoLog","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","resolvedOnDisconnectTree","resolved","repoOnDisconnectCancel","repoOnDisconnectSet","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","repoStartTransaction","transactionUpdate","unwatcher","applyLocally","transaction","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","repoGetLatestState","queueNode","nodeQueue","priorityForNode","currentNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","callbacks","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","call","onCancel","hasCancelCallback","userCallback","OnDisconnect","cancel","wrapCallback","setWithPriority","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","refFromURL","parsedURL","thennablePushRef","pushRef","setPriority","callbackContext","container","ValueEventRegistration","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","expCallback","QueryConstraint","QueryEndAtConstraint","_value","_apply","endAt","QueryEndBeforeConstraint","endBefore","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","startAfter","QueryLimitToFirstConstraint","_limit","limitToFirst","limit","QueryLimitToLastConstraint","limitToLast","QueryOrderByChildConstraint","parsedPath","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","equalTo","queryImpl","queryConstraints","constraint","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appName","appRepos","repoManagerForceRestClient","forceRestClient","_repoInternal","_instanceStarted","_rootInternal","_delete","apiName","checkTransportInit","forceWebSockets","forceLongPolling","getDatabase","identifier","emulator","connectDatabaseEmulator","mockUserToken","goOffline","goOnline","enableLogging","registerDatabase","variant","instanceIdentifier","getProvider","setMultipleInstances","SERVER_TIMESTAMP","serverTimestamp","increment","TransactionResult","committed","runTransaction","promiseComplete","prototype","simpleListen","echo","onEcho","hijackHash","newHash","oldPut","_QueryImpl","_QueryParams","_ReferenceImpl","_TEST_ACCESS_forceRestClient","_TEST_ACCESS_hijackHash","_repoManagerDatabaseFromApp","_setSDKVersion","_validatePathString","_validateWritablePath"],"sources":["/Users/simranjeet.dev/Documents/Simranjeet_Upwork/node_modules/@firebase/database/dist/index.esm2017.js"],"sourcesContent":["import { _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, getDefaultEmulatorHostnameAndPort, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.13.10\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\r\n    if (typeof timeout === 'number' &&\r\n        // @ts-ignore Is only defined in Deno environments.\r\n        typeof Deno !== 'undefined' &&\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno['unrefTimer']) {\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno.unrefTimer(timeout);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    }\r\n    else if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        if (applicationId) {\r\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            let options;\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n            }\r\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    /**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */\r\n    static get IS_TRANSPORT_INITIALIZED() {\r\n        return this.globalTransportInitialized_;\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n            TransportManager.globalTransportInitialized_ = true;\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Keeps track of whether the TransportManager has already chosen a transport to use\r\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst MIN_PUSH_CHAR = '-';\r\nconst MAX_PUSH_CHAR = 'z';\r\nconst MAX_KEY_LEN = 786;\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\r\nconst successor = function (key) {\r\n    if (key === '' + INTEGER_32_MAX) {\r\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\r\n        return MIN_PUSH_CHAR;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt + 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    if (next.length < MAX_KEY_LEN) {\r\n        next.push(MIN_PUSH_CHAR);\r\n        return next.join('');\r\n    }\r\n    let i = next.length - 1;\r\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\r\n        i--;\r\n    }\r\n    // `successor` was called on the largest possible key, so return the\r\n    // MAX_NAME, which sorts larger than all keys.\r\n    if (i === -1) {\r\n        return MAX_NAME;\r\n    }\r\n    const source = next[i];\r\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\r\n    next[i] = sourcePlusOne;\r\n    return next.slice(0, i + 1).join('');\r\n};\r\n// `key` is assumed to be non-empty.\r\nconst predecessor = function (key) {\r\n    if (key === '' + INTEGER_32_MIN) {\r\n        return MIN_NAME;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt - 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\r\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\r\n    // than that, `predecessor(predecessor(key))`, is\r\n    //\r\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\r\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\r\n    //\r\n    // analogous to increment/decrement for base-10 integers.\r\n    //\r\n    // This works because lexigographic comparison works character-by-character,\r\n    // using length as a tie-breaker if one key is a prefix of the other.\r\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\r\n        if (next.length === 1) {\r\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\r\n            return '' + INTEGER_32_MAX;\r\n        }\r\n        delete next[next.length - 1];\r\n        return next.join('');\r\n    }\r\n    // Replace the last character with it's immediate predecessor, and\r\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\r\n    // lexicographically largest possible key smaller than `key`.\r\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\r\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    let inRange;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let startPost;\r\n                let endPost;\r\n                let cmp;\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    const indexCompare = this.index_.getCompare();\r\n                    cmp = (a, b) => indexCompare(b, a);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                let count = 0;\r\n                let foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    hasStartAfter() {\r\n        return this.startAfterSet_;\r\n    }\r\n    hasEndBefore() {\r\n        return this.endBeforeSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = successor(indexValue);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        let childKey;\r\n        if (key == null) {\r\n            childKey = MAX_NAME;\r\n        }\r\n        else {\r\n            childKey = successor(key);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let childKey;\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = predecessor(indexValue);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        if (key == null) {\r\n            childKey = MIN_NAME;\r\n        }\r\n        else {\r\n            childKey = predecessor(key);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[\"startAt\" /* START_AT */] +=\r\n                ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[\"endAt\" /* END_AT */] +=\r\n                ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === null;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\r\n *  deduping needs to take place. This flag allows toggling of that behavior\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        if (!skipListenerDedup) {\r\n            /**\r\n             * We may have just removed one of many listeners and can short-circuit this whole process\r\n             * We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n             * properly set up.\r\n             */\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            const removingDefault = -1 !==\r\n                removed.findIndex(query => {\r\n                    return query._queryParams.loadsAllData();\r\n                });\r\n            const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n            if (removingDefault && !covered) {\r\n                const subtree = syncTree.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (let i = 0; i < newViews.length; ++i) {\r\n                        const view = newViews[i], newQuery = view.query;\r\n                        const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                        syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                // Otherwise there's nothing below us, so nothing we need to start listening on\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    const defaultTag = null;\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach((queryToRemove) => {\r\n                        const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query, eventRegistration) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        /**\r\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\r\n         * Add an event registration,\r\n         * Update data at the path,\r\n         * Raise any events,\r\n         * Cleanup the SyncTree\r\n         */\r\n        syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\r\n        let events;\r\n        if (query._queryParams.loadsAllData()) {\r\n            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        }\r\n        else {\r\n            const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\r\n        }\r\n        /*\r\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\r\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\r\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\r\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\r\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\r\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\r\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\r\n         * ensure the corresponding child events will get fired.\r\n         */\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n        syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\r\n        return node;\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\r\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    const callbackContext = new CallbackContext(() => { });\r\n    const container = new ValueEventRegistration(callbackContext);\r\n    return repoGetValue(query._repo, query, container).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value less than or equal\r\n * to the specified value and a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\nfunction checkTransportInit() {\r\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\r\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\r\n    }\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nfunction forceWebSockets() {\r\n    checkTransportInit();\r\n    BrowserPollConnection.forceDisallow();\r\n}\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nfunction forceLongPolling() {\r\n    checkTransportInit();\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    const db = _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\r\n    if (emulator) {\r\n        connectDatabaseEmulator(db, ...emulator);\r\n    }\r\n    return db;\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}